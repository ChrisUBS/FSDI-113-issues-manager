# Generated by Django 5.1.7 on 2025-03-29 02:56

from django.db import migrations
import random

def populate_status(apps, schemaeditor):
    entries = {
        "to do": "An issue for which work has not yet begun",
        "in progress": "An issue currently being worked on",
        "done": "An issue for which work has been completed"
    }
    Status = apps.get_model("issues", "Status")
    for key, value in entries.items():
        status_obj = Status(name=key, description=value)
        status_obj.save()
        
def populate_priority(apps, schemaeditor):
    entries = {
        "low": "Represents a low priority or severity level.",
        "medium": "Represents a moderate priority or severity level.",
        "high": "Represents a high priority or severity level."
    }
    Priority = apps.get_model("issues", "Priority")
    for key, value in entries.items():
        priority_obj = Priority(name=key, description=value)
        priority_obj.save()

def populate_issues(apps, schemaeditor):
    # Import necessary models
    Issue = apps.get_model("issues", "Issue")
    Status = apps.get_model("issues", "Status")
    Priority = apps.get_model("issues", "Priority")
    CustomUser = apps.get_model("accounts", "CustomUser")
    Team = apps.get_model("accounts", "Team")
    
    # Get statuses
    todo_status = Status.objects.get(name="to do")
    progress_status = Status.objects.get(name="in progress")
    done_status = Status.objects.get(name="done")
    
    # Get priorities
    low_priority = Priority.objects.get(name="low")
    medium_priority = Priority.objects.get(name="medium")
    high_priority = Priority.objects.get(name="high")
    
    # Get teams
    alpha_team = Team.objects.get(name="alpha")
    bravo_team = Team.objects.get(name="bravo")
    
    # Get users by team
    alpha_users = CustomUser.objects.filter(team=alpha_team)
    bravo_users = CustomUser.objects.filter(team=bravo_team)
    
    # Issue templates per team
    issue_templates = {
        "alpha": [
            # 2 todo issues
            {"name": "Implement login page", "summary": "Create login functionality", "status": todo_status},
            {"name": "Design dashboard", "summary": "Create wireframes for dashboard", "status": todo_status},
            # 2 in progress issues
            {"name": "Setup database", "summary": "Configure database connections", "status": progress_status},
            {"name": "User authentication", "summary": "Implement user auth flow", "status": progress_status},
            # 2 done issues
            {"name": "Project setup", "summary": "Initialize project structure", "status": done_status},
            {"name": "Requirements gathering", "summary": "Document project requirements", "status": done_status},
        ],
        "bravo": [
            # 2 todo issues
            {"name": "API documentation", "summary": "Document REST API endpoints", "status": todo_status},
            {"name": "User settings page", "summary": "Create user settings interface", "status": todo_status},
            # 2 in progress issues
            {"name": "Payment integration", "summary": "Integrate payment gateway", "status": progress_status},
            {"name": "Email notifications", "summary": "Setup automated emails", "status": progress_status},
            # 2 done issues
            {"name": "Database schema", "summary": "Design initial database schema", "status": done_status},
            {"name": "User stories", "summary": "Define user stories for sprint", "status": done_status},
        ]
    }
    
    # Get product owners for each team
    Role = apps.get_model("accounts", "Role")
    po_role = Role.objects.get(name="product owner")
    
    alpha_po = CustomUser.objects.get(team=alpha_team, role=po_role)
    bravo_po = CustomUser.objects.get(team=bravo_team, role=po_role)
    
    # Get developers for assignees
    alpha_devs = list(CustomUser.objects.filter(team=alpha_team).exclude(role=po_role))
    bravo_devs = list(CustomUser.objects.filter(team=bravo_team).exclude(role=po_role))
    
    # Create issues for Alpha team
    for issue_data in issue_templates["alpha"]:
        # Product owner as reporter
        reporter = alpha_po
        # Random developer as assignee
        assignee = random.choice(alpha_devs)
        # Select random priority
        priority = random.choice([low_priority, medium_priority, high_priority])
        
        Issue.objects.create(
            name=issue_data["name"],
            summary=issue_data["summary"],
            description=f"Detailed description for {issue_data['name']}",
            reporter=reporter,
            assignee=assignee,
            status=issue_data["status"],
            priority=priority
        )
    
    # Create issues for Bravo team
    for issue_data in issue_templates["bravo"]:
        # Product owner as reporter
        reporter = bravo_po
        # Random developer as assignee
        assignee = random.choice(bravo_devs)
        # Select random priority
        priority = random.choice([low_priority, medium_priority, high_priority])
        
        Issue.objects.create(
            name=issue_data["name"],
            summary=issue_data["summary"],
            description=f"Detailed description for {issue_data['name']}",
            reporter=reporter,
            assignee=assignee,
            status=issue_data["status"],
            priority=priority
        )

class Migration(migrations.Migration):

    dependencies = [
        ('issues', '0001_initial'),
        ('accounts', '0002_auto_20250328_0057'),  # Add dependency to accounts migration
    ]

    operations = [
        migrations.RunPython(populate_status),
        migrations.RunPython(populate_priority),
        migrations.RunPython(populate_issues),
    ]